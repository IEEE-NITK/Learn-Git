#include<iostream>
#include<string>
#include<sstream>
#include<fstream>
using namespace std;
class primary
{
public:
string usnl[100];
int addl[100];
int count;
void create_index();
string extract_usn(string);
void sort_primary();
void insert();
int search_index(string key);
void search(string key);
};

void primary::create_index()
{

fstream file;
int pos;
string usn,buffer;
count=0;
file.open("1.txt",ios::in);
while(!file.eof())
{
buffer.erase();
pos=file.tellg();
getline(file,buffer);
usn=extract_usn(buffer);
usnl[++count]=usn;
addl[count]=pos;
}
file.close();
sort_primary();
}


string primary::extract_usn(string buffer)
{
string usn;
int i=0;
usn.erase();
while(buffer[i]!='|')
usn+=buffer[i++];
return usn;
}


void primary::sort_primary()
{
int i,j,tempa;
string tempu;
for(i=0;i<=count;i++)
{
for(j=i+1;j<=count;j++)
{
if(usnl[j]>usnl[i])
{
tempu=usnl[i];
usnl[i]=usnl[j];
usnl[j]=tempu;

tempa=addl[i];
addl[i]=addl[j];
addl[j]=tempa;
}
}
}
}


void primary::insert()
{

string usn,name,branch,sem,buffer;
int semester,pos;
cout<<"usn: ";
cin>>usn;
cout<<"name: ";
cin>>nam sdfsdf

sdf

345
;
buffer=usn+'|'+name+'|'+branch+'|'+sem+'$'+'\n';

fstream file;
file.open("1.txt",ios::out|ios::app);
pos=file.tellp();
file<<buffer;
usnl[++count]=usn;
addl[count]=pos;
sort_primary();
file.close();
}


int primary::search_index(string key)
{
int i;
for(i=0;i<=count;i++)
{
cout<<"usn:"<<usnl[i]<<"\n";
cout<<"add"<<addl[i]<<"\n";
}
cout<<"count"<<count<<"\n";
int low=0,high=count,mid=0,flag=0;
while(low<=high)
{
mid=(high-low)/2;
if(usnl[mid]==key) { flag=1;
break;
}
if(usnl[mid]>key) high=mid-1;
if(usnl[mid]<key) low=mid+1;
}
cout<<"mid:"<<mid<<"\n";
if(flag) return mid;
else return 0;
} 


void primary::search(string key)
{
fstream file;
int address;
file.open("1.txt",ios::in);
string buffer;
int pos;
pos=search_index(key);

{
buffer.erase();
address=addl[pos];
file.seekp(address,ios::beg);
cout<<"address"<<address;
getline(file,buffer);
cout<<"found:"<<buffer;
}

file.close();
}sdfsdf

sxcv
{

cout<<"1 add\n2 search";
cin>>choice;
switch(choice)
{
case 1:p.insert();
break;
case 2:
cout<<"enter key";
cin>>key;
p.search(key);
break;
}
}
}






















